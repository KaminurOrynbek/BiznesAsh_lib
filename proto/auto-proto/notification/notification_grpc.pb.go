// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.2
// source: notification/notification.proto

package auto_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SendWelcomeEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	SendCommentNotification(ctx context.Context, in *CommentNotification, opts ...grpc.CallOption) (*NotificationResponse, error)
	SendReportNotification(ctx context.Context, in *ReportNotification, opts ...grpc.CallOption) (*NotificationResponse, error)
	NotifyNewPost(ctx context.Context, in *NewPostNotification, opts ...grpc.CallOption) (*NotificationResponse, error)
	NotifyPostUpdate(ctx context.Context, in *PostUpdateNotification, opts ...grpc.CallOption) (*NotificationResponse, error)
	SendVerificationEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	VerifyEmail(ctx context.Context, in *VerificationCode, opts ...grpc.CallOption) (*NotificationResponse, error)
	NotifySystemMessage(ctx context.Context, in *SystemMessageRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	SubscribeToUpdates(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*NotificationResponse, error)
	UnsubscribeFromUpdates(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*NotificationResponse, error)
	GetSubscriptions(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*SubscriptionsResponse, error)
	ResendVerificationCode(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*NotificationResponse, error)
	SendLikeNotification(ctx context.Context, in *LikeNotification, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendWelcomeEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/SendWelcomeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendCommentNotification(ctx context.Context, in *CommentNotification, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/SendCommentNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendReportNotification(ctx context.Context, in *ReportNotification, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/SendReportNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) NotifyNewPost(ctx context.Context, in *NewPostNotification, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/NotifyNewPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) NotifyPostUpdate(ctx context.Context, in *PostUpdateNotification, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/NotifyPostUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendVerificationEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/SendVerificationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) VerifyEmail(ctx context.Context, in *VerificationCode, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) NotifySystemMessage(ctx context.Context, in *SystemMessageRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/NotifySystemMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SubscribeToUpdates(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/SubscribeToUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UnsubscribeFromUpdates(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/UnsubscribeFromUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetSubscriptions(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*SubscriptionsResponse, error) {
	out := new(SubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ResendVerificationCode(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/ResendVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendLikeNotification(ctx context.Context, in *LikeNotification, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/SendLikeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SendWelcomeEmail(context.Context, *EmailRequest) (*NotificationResponse, error)
	SendCommentNotification(context.Context, *CommentNotification) (*NotificationResponse, error)
	SendReportNotification(context.Context, *ReportNotification) (*NotificationResponse, error)
	NotifyNewPost(context.Context, *NewPostNotification) (*NotificationResponse, error)
	NotifyPostUpdate(context.Context, *PostUpdateNotification) (*NotificationResponse, error)
	SendVerificationEmail(context.Context, *EmailRequest) (*NotificationResponse, error)
	VerifyEmail(context.Context, *VerificationCode) (*NotificationResponse, error)
	NotifySystemMessage(context.Context, *SystemMessageRequest) (*NotificationResponse, error)
	SubscribeToUpdates(context.Context, *UserID) (*NotificationResponse, error)
	UnsubscribeFromUpdates(context.Context, *UserID) (*NotificationResponse, error)
	GetSubscriptions(context.Context, *UserID) (*SubscriptionsResponse, error)
	ResendVerificationCode(context.Context, *UserID) (*NotificationResponse, error)
	SendLikeNotification(context.Context, *LikeNotification) (*NotificationResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SendWelcomeEmail(context.Context, *EmailRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWelcomeEmail not implemented")
}
func (UnimplementedNotificationServiceServer) SendCommentNotification(context.Context, *CommentNotification) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommentNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendReportNotification(context.Context, *ReportNotification) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReportNotification not implemented")
}
func (UnimplementedNotificationServiceServer) NotifyNewPost(context.Context, *NewPostNotification) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNewPost not implemented")
}
func (UnimplementedNotificationServiceServer) NotifyPostUpdate(context.Context, *PostUpdateNotification) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPostUpdate not implemented")
}
func (UnimplementedNotificationServiceServer) SendVerificationEmail(context.Context, *EmailRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationEmail not implemented")
}
func (UnimplementedNotificationServiceServer) VerifyEmail(context.Context, *VerificationCode) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedNotificationServiceServer) NotifySystemMessage(context.Context, *SystemMessageRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySystemMessage not implemented")
}
func (UnimplementedNotificationServiceServer) SubscribeToUpdates(context.Context, *UserID) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToUpdates not implemented")
}
func (UnimplementedNotificationServiceServer) UnsubscribeFromUpdates(context.Context, *UserID) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromUpdates not implemented")
}
func (UnimplementedNotificationServiceServer) GetSubscriptions(context.Context, *UserID) (*SubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedNotificationServiceServer) ResendVerificationCode(context.Context, *UserID) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerificationCode not implemented")
}
func (UnimplementedNotificationServiceServer) SendLikeNotification(context.Context, *LikeNotification) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLikeNotification not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendWelcomeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendWelcomeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/SendWelcomeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendWelcomeEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendCommentNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendCommentNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/SendCommentNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendCommentNotification(ctx, req.(*CommentNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendReportNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendReportNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/SendReportNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendReportNotification(ctx, req.(*ReportNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_NotifyNewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPostNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).NotifyNewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/NotifyNewPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).NotifyNewPost(ctx, req.(*NewPostNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_NotifyPostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUpdateNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).NotifyPostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/NotifyPostUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).NotifyPostUpdate(ctx, req.(*PostUpdateNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/SendVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendVerificationEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).VerifyEmail(ctx, req.(*VerificationCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_NotifySystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).NotifySystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/NotifySystemMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).NotifySystemMessage(ctx, req.(*SystemMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SubscribeToUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SubscribeToUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/SubscribeToUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SubscribeToUpdates(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UnsubscribeFromUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UnsubscribeFromUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/UnsubscribeFromUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UnsubscribeFromUpdates(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetSubscriptions(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ResendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ResendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/ResendVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ResendVerificationCode(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendLikeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendLikeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/SendLikeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendLikeNotification(ctx, req.(*LikeNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWelcomeEmail",
			Handler:    _NotificationService_SendWelcomeEmail_Handler,
		},
		{
			MethodName: "SendCommentNotification",
			Handler:    _NotificationService_SendCommentNotification_Handler,
		},
		{
			MethodName: "SendReportNotification",
			Handler:    _NotificationService_SendReportNotification_Handler,
		},
		{
			MethodName: "NotifyNewPost",
			Handler:    _NotificationService_NotifyNewPost_Handler,
		},
		{
			MethodName: "NotifyPostUpdate",
			Handler:    _NotificationService_NotifyPostUpdate_Handler,
		},
		{
			MethodName: "SendVerificationEmail",
			Handler:    _NotificationService_SendVerificationEmail_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _NotificationService_VerifyEmail_Handler,
		},
		{
			MethodName: "NotifySystemMessage",
			Handler:    _NotificationService_NotifySystemMessage_Handler,
		},
		{
			MethodName: "SubscribeToUpdates",
			Handler:    _NotificationService_SubscribeToUpdates_Handler,
		},
		{
			MethodName: "UnsubscribeFromUpdates",
			Handler:    _NotificationService_UnsubscribeFromUpdates_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _NotificationService_GetSubscriptions_Handler,
		},
		{
			MethodName: "ResendVerificationCode",
			Handler:    _NotificationService_ResendVerificationCode_Handler,
		},
		{
			MethodName: "SendLikeNotification",
			Handler:    _NotificationService_SendLikeNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/notification.proto",
}
