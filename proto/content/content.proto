syntax = "proto3";

package content;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "github.com/KaminurOrynbek/BiznesAsh/ContentService/auto-proto";

service ContentService {
  rpc CreatePost(CreatePostRequest) returns (PostResponse) {
    option (google.api.http) = {
      post: "/v1/posts"
      body: "*"
    };
  }

  rpc UpdatePost(UpdatePostRequest) returns (PostResponse) {
    option (google.api.http) = {
      put: "/v1/posts"
      body: "*"
    };
  }

  rpc DeletePost(PostIdRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/v1/posts/{id}"
    };
  }

  rpc GetPost(PostIdRequest) returns (PostResponse) {
    option (google.api.http) = {
      get: "/v1/posts/{id}"
    };
  }

  rpc ListPosts(ListPostsRequest) returns (ListPostsResponse) {
    option (google.api.http) = {
      get: "/v1/posts"
    };
  }

  rpc SearchPosts(SearchPostsRequest) returns (ListPostsResponse) {
    option (google.api.http) = {
      get: "/v1/posts/search"
    };
  }

  rpc CreateComment(CreateCommentRequest) returns (CommentResponse) {
    option (google.api.http) = {
      post: "/v1/comments"
      body: "*"
    };
  }

  rpc UpdateComment(UpdateCommentRequest) returns (CommentResponse) {
    option (google.api.http) = {
      put: "/v1/comments"
      body: "*"
    };
  }

  rpc DeleteComment(CommentIdRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/v1/comments/{id}"
    };
  }

  rpc ListComments(ListCommentsRequest) returns (ListCommentsResponse) {
    option (google.api.http) = {
      get: "/v1/posts/{post_id}/comments"
    };
  }

  rpc LikePost(LikePostRequest) returns (LikePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts/{post_id}/like"
      body: "*"
    };
  }

  rpc DislikePost(DislikePostRequest) returns (DislikePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts/{post_id}/dislike"
      body: "*"
    };
  }

  rpc LikeComment(LikeCommentRequest) returns (LikeCommentResponse) {
    option (google.api.http) = {
      post: "/v1/comments/{comment_id}/like"
      body: "*"
    };
  }
}

// Enums

enum PostType {
  LEGAL_INFO = 0;
  GUIDE = 1;
}

// Models

message Post {
  string id = 1;
  string title = 2;
  string content = 3;
  PostType type = 4;
  string author_id = 5;
  bool published = 6;
  int32 likes_count = 7;
  int32 dislikes_count = 8;
  string created_at = 9;
  string updated_at = 10;
  int32 comments_count = 11;
  repeated Comment comments = 12;
}

message Comment {
  string id = 1;
  string post_id = 2;
  string author_id = 3;
  string content = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message Like {
  string id = 1;
  string post_id = 2;
  string user_id = 3;
  bool is_like = 4;
  string created_at = 5;
}

// Request/Response DTOs

message CreatePostRequest {
  string id = 1;
  string title = 2;
  string content = 3;
  PostType type = 4;
  string author_id = 5;
  bool published = 6;
}

message UpdatePostRequest {
  string id = 1;
  string title = 2;
  string content = 3;
  bool published = 4;
}

message PostIdRequest {
  string id = 1;
}

message ListPostsRequest {
  PostType type = 1;
  int32 page = 2;
  int32 limit = 3;
}

message SearchPostsRequest {
  string query = 1;
  int32 page = 2;
  int32 limit = 3;
}

message PostResponse {
  Post post = 1;
}

message ListPostsResponse {
  repeated Post posts = 1;
}

message DeleteResponse {
  bool success = 1;
}

message CreateCommentRequest {
  string id = 1;
  string post_id = 2;
  string author_id = 3;
  string content = 4;
}

message UpdateCommentRequest {
  string id = 1;
  string content = 2;
}

message CommentIdRequest {
  string id = 1;
}

message CommentResponse {
  Comment comment = 1;
}

message ListCommentsResponse {
  repeated Comment comments = 1;
}

message ListCommentsRequest {
  string post_id = 1;
}

message LikePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message DislikePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message LikePostResponse {
  int32 likes_count = 1;
}

message DislikePostResponse {
  int32 dislikes_count = 1;
}

message LikeCommentRequest {
  string comment_id = 1;
  string user_id = 2;
}

message LikeCommentResponse {
  int32 likes_count = 1;
}
